## GENERAL RULES
1. Regularly suggest short one line text content for git commit messages
2. Just suggest the text, do not offer to run git commands
3. Do not edit the files in requirements/ or docs/

## RAILS RULES
1. Use Rails 8.0.1 : see the docs for Rails 8 in docs/rails_8
2. Always make sure the code is up to date with Rails 8 and isn't using deprecated ways
  a. Use Kamal 2 (with Thruster) for zero-downtime deployments without relying on external PaaS solutions
  b. Adopt Solid Cable for Action Cable (pub/sub), Solid Cache for caching (disk-based, scalable, and secure), and Solid Queue for background job processing
  c. Leverage the new authentication generator (rails generate authentication) to scaffold a secure auth session management without third-party gems like Devise
  d. Utilize the new dedicated script folder and script generator (rails generate script <name>) to organize one-off and utility scripts
  e. Use the new `params.expect` method instead of `params.require` and `params.permit` to require and permit parameters in one concise call
  f. Stick with the modern hash syntax for enums (e.g. enum status: { pending: 0, active: 1 })
3. Always favor a rails generator when possible instead of writing code yourself
4. Always use timezone-aware methods: Time.zone.now instead of Time.current/Time.now, Time.zone.parse instead of Time.parse
5. If you want to debug the code against real data, you can use 'rails runner' commands if it is relevant
6. Database and ActiveRecord Rules:
  a. ALWAYS check model associations (belongs_to, has_many, etc.) and schema.rb BEFORE writing queries
  b. Start queries from the highest-level model in the relationship chain
  c. Use association methods to traverse relationships
  d. Use scopes defined in models
  e. NEVER use raw SQL - use ActiveRecord query methods (where, joins, includes)
  f. If a query seems complex, first check if it can be simplified by:
    - Adding a new association to the model
    - Creating a new scope
    - Using existing scopes with merge
  g. For unavoidable complex SQL, use Arel instead of raw SQL strings
  h. For complex queries:
    - Break down into smaller, readable chunks using scopes
    - Use merge to combine scopes from different models
    - Use includes/preload/eager_load to avoid N+1 queries
  i. For date-based grouping:
    - ALWAYS use the groupdate gem
    - Configure week start to Monday using week_start: :monday
    - Example: Model.group_by_week(:created_at, week_start: :monday).count
    - See documentation in docs/groupdate/README.md
  j. Take advantage of new data type support (e.g. float4/float8 in PostgreSQL) and performance enhancements.
7. Embrace the "Convention over Configuration" philosophy by following Rails' naming conventions and project structures
8. Maintain a clear separation of concerns by ensuring controllers handle request-response cycles and models encapsulate business logic
9. Delegate complex logic to service objects or concerns as needed
10. Make sure the timestamps attribute fields are called [timed_subject]_at and that durations are called [timed_subject]_in_[duration_unit]
11. Use Chartkick for charts : see the docs for chartkick in docs/chartkick.md
12. Do not precompile the assets in dev
13. The dev server (bin/dev) is always running, don't offer to start new ones
14. You can reset the cache with `rails runner 'Rails.cache.clear' && rm -rf tmp/cache` but do not do it unless absolutely necessary

## FLOWBITE UI STYLING RULES
1. Use flowbite for designing the apps components : see the docs for flowbite in docs/flowbite
2. Responsive Design:
  a. Always use mobile-first approach (smaller screen styles as default)
  b. Add responsive variants (sm:, md:, lg:) only when needed to adapt for larger screens